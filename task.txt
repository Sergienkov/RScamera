# Техническое задание / Пакет задач для разработчика

**Проект:** Android‑приложение «RealSense Capture»
**Версия документа:** 1.0 (05 августа 2025)
**Контакт:** tg: @sevgen

---

## 1. Цели проекта

1. Отображать в реальном времени поток **RGB + Depth** с камер Intel RealSense D435 / D455, подключённых по USB‑C OTG.
2. По нажатию «Capture» писать «бурст» длительностью 0,1 с:

   * **≥ 3 RGB**‑кадра подряд (JPEG 90%).
   * **≥ 5 Depth**‑кадров (и все остальные кадры за 0,1 с) в единый `depth_0.1s.bag`.
3. Сохранять результаты на устройство, вести каталог сессий, показывать галерею для просмотра.
4. Давать возможность добавлять **текстовые и голосовые** (AAC \*.m4a) комментарии к каждой сессии.

---

## 2. Область поддерживаемых устройств

| Параметр  | Требование                         |
| --------- | ---------------------------------- |
| ОС        | Android 10 (API 29) и выше         |
| CPU       | Arm64‑v8a                          |
| Интерфейс | USB‑C OTG, питание камеры ≥ 900 mA |
| Камеры    | Intel RealSense D435, D455         |

---

## 3. Технологический стек

| Слой / задача         | Стек                                      | Обоснование               |
| --------------------- | ----------------------------------------- | ------------------------- |
| UI & логика           | Kotlin 1.9 + Jetpack Compose (Material 3) | Нативный декларативный UI |
| DI                    | Hilt                                      | Стандарт de‑facto         |
| Асинхронность         | Kotlin Coroutines / Flow                  |                           |
| Доступ к RealSense    | C++17 (libRealSense2 SDK) через JNI       | Полный контроль камеры    |
| Сборка native         | NDK r26, CMake                            |                           |
| Хранение метаданных   | Room (SQLite)                             |                           |
| Запись голоса         | Android Media3 Recorder                   | Современный API           |
| Задачи/фоновые работы | WorkManager                               |                           |
| Тестирование          | JUnit 5, Espresso, Macrobenchmark         |                           |
| Сборка                | Gradle 8 (Kotlin DSL)                     |                           |

---

## 4. Функциональные требования

| ID  | Требование                                                         | Приор. |
| --- | ------------------------------------------------------------------ | ------ |
| F‑1 | Предпросмотр RGB + Depth в реальном времени.                       | Must   |
| F‑2 | Запись бурста 0,1 с (≥ 3 RGB + ≥ 5 Depth в *.bag*).                | Must   |
| F‑3 | Параметры (разр‑ие, FPS, порог свободного места) настраиваются.    | Should |
| F‑4 | Структура каталогов: `/Captures/Session‑<UTC_ISO>/…`               | Must   |
| F‑5 | Форматы: JPEG 90 %, *.bag*, M4A (AAC 48 kHz).                      | Must   |
| F‑6 | Галерея сессий, просмотр RGB, воспроизведение *.bag*, комментарии. | Must   |
| F‑7 | Голосовой комментарий и индикатор уровня в UI.                     | Must   |
| F‑8 | Проверка места: если < 200 MB — блокировать запись.                | Should |
| F‑9 | Экспорт / Share сессии (ZIP) через FileProvider.                   | Could  |

---

## 5. Нефункциональные требования

* Предпросмотр ≤ 120 мс задержки.
* Запуск/остановка камеры без крашей при Hot‑plug.
* Энергопотребление фона < 15 % CPU, остановка стрима в `onPause()`.
* Локализация EN / RU; поддержка TalkBack.

---

## 6. Архитектура (слои)

```
UI (Compose) ── ViewModel (Coroutines/StateFlow) ── Domain Use‑cases ── Repository
                                                          │
                             ┌────────────Data────────────┤
                             │  Room  │  MediaStore │ JNI │
                             └────────┴─────────────┴─────┘
                                                         │
                                    Native C++ (librealsense2)
```

---

## 7. Алгоритм записи бурста (C++)

1. **Preview‑pipeline** (RGB 1280×720\@30 fps + Depth High‑Detail 848×480\@60 fps) работает постоянно.
2. При триггере:

   * Создать временный pipeline с `config.enable_record_to_file(<dir>/depth_0.1s.bag)`.
   * Захватывать кадры 100 мс, сохраняя RGB в `rgb_%03d.jpg` (сторонняя `stb_image_write`).
   * Остановить pipeline, проверить ≥ 3 JPEG.
3. Проверить свободное место (`StatFs`); при нехватке — удалить файлы и сообщить пользователю.
4. Записать метаданные и пути в Room.

---

## 8. Структура каталогов

```
/Android/data/com.example.realsensecapture/files/Captures/
  Session-2025-08-05T14-00-21Z/
      rgb_000.jpg
      rgb_001.jpg
      rgb_002.jpg
      depth_0.1s.bag
      note.m4a        ← опц.
      meta.json       ← {id, createdAt, …, comment}
```

---

## 9. CI / CD

* **GitHub Actions**: `./gradlew lint test connectedCheck assembleRelease`.
* Nightly APK; релиз AAB с подписью Google Play App Signing (по готовности).

---

## 10. Milestones (реалистичный план)

| Этап                             | Дни | Выход               |
| -------------------------------- | --- | ------------------- |
| 0. Скелет проекта (Codex prompt) | 2   | Сборка без ошибок   |
| 1. Интеграция RealSense preview  | 4   | F‑1                 |
| 2. Нативная запись бурста        | 4   | F‑2, F‑5 (bag+JPEG) |
| 3. Галерея + детали              | 3   | F‑6                 |
| 4. Голосовые заметки             | 3   | F‑7                 |
| 5. Настройки + проверки места    | 2   | F‑3, F‑8            |
| 6. Экспорт/Share                 | 2   | F‑9                 |
| 7. Тесты + оптимизация           | 4   | KPI выполнены       |
| **Итого ≈ 24 рабочих дней**      |     |                     |

---

## 11. Доставка (deliverables)

1. Репозиторий Git с историей и тэгом `v1.0`.
2. AAB / APK, proguard‑mapping.
3. Скрипт сборки librealsense2‑AAR или его бинарь.
4. Документация разработки (KDoc + Doxygen для native).
5. Руководство пользователя (PDF, EN/RU).

---

## 12. Исходные знач‑я параметров по умолчанию

| Параметр               | Значение      |
| ---------------------- | ------------- |
| Depth Resolution / FPS | High‑Detail 848×480 @ 60 |
| RGB Resolution  / FPS  | 1280×720 @ 30 |
| Порог свободного места | 200 MB        |
| JPEG качество          | 90 %          |
| Запись бурста          | 100 мс        |

---

## 13. Закрытые вопросы

* Формат глубины — `.bag`.
* Интервал RGB — «подряд» (без задержек).
* IMU‑данные не пишем.
* Голосовые комментарии нужны.
* Дистрибуция через Play Store — **пока нет** (sideload OK).
* Локализации: RU / EN.
